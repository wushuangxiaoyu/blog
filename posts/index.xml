<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 木屐帽子</title>
    <link>https://wushuangxiaoyu.github.io/blog/posts/</link>
    <description>Recent content in Posts on 木屐帽子</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-ch</language>
    <lastBuildDate>Mon, 16 Sep 2019 20:42:36 +0800</lastBuildDate>
    
	<atom:link href="https://wushuangxiaoyu.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>进程，线程在内存中的结构</title>
      <link>https://wushuangxiaoyu.github.io/blog/posts/process_memory/</link>
      <pubDate>Mon, 16 Sep 2019 20:42:36 +0800</pubDate>
      
      <guid>https://wushuangxiaoyu.github.io/blog/posts/process_memory/</guid>
      <description>进程 &amp;emsp;&amp;emsp;进程是操作系统对一个正在运行的程序的抽象，它是资源分配的最小单位。
&amp;emsp;&amp;emsp;那么进程的内存结构和内存布局是啥样的呢？
虚拟地址 &amp;emsp;&amp;emsp;在x86_64下面，其实虚拟地址只使用了48位。所以显示的地址都是只有12位16进制。48位地址长度也就是对应了256TB的地址空间。
&amp;emsp;&amp;emsp;而在Linux下有效的地址区间是从 0x00000000 00000000 ~ 0x00007FFF FFFFFFFF 还有 0xFFFF8000 00000000 ~ 0xFFFFFFFF FFFFFFFF 两个地址区间。而每个地址区间都有128TB的地址空间可以使用，所以总共是256TB的可用空间。地址空间的划分如下所示
ffffffff`ffffffff _____________ | | | 内核空间 | ffff8000`00000000 |____________| | | | | | 向上增长 | | /|\ | 00007fff`ffffffff |______|_____| | | | 用户空间 | 00000000`00000000 |____________|  内存布局 &amp;emsp;&amp;emsp;在linux中可以通过如命令查看某一进程的内存布局：
cat /proc/&amp;lt;pid&amp;gt;/maps pmap &amp;lt;pid&amp;gt; -X  &amp;emsp;&amp;emsp;mac查看内存布局参考如何快速读取Mac进程的内存映射
&amp;emsp;&amp;emsp;以Linux中的一个JVM进程为例 cat /proc//map 查看其内存布局：
00400000-00401000 r-xp 00000000 fd:00 30540205 /a8root/work/soft/jdk1.8.0_121/bin/java 00600000-00601000 rw-p 00000000 fd:00 30540205 /a8root/work/soft/jdk1.</description>
    </item>
    
    <item>
      <title>HMAC-SHA1接口校验</title>
      <link>https://wushuangxiaoyu.github.io/blog/posts/hmac-sha1/</link>
      <pubDate>Sun, 15 Sep 2019 21:16:25 +0800</pubDate>
      
      <guid>https://wushuangxiaoyu.github.io/blog/posts/hmac-sha1/</guid>
      <description>引言 &amp;emsp;&amp;emsp;对于面向客户端的api接口，可以通过HMAC算法对Request生成摘要信息，请求时携带摘要信息，服务端进行校验的方式防止请求被篡改等中间攻击，也对防爬起到一定作用。
HMAC-SHA1 &amp;emsp;&amp;emsp;HMAC是密钥相关的哈希运算消息认证码(Hash-based Message Authentication Code),HMAC运算利用哈希算法(HMAC-SHA1就是使用SHA1哈希算法)，以一个密钥和一个消息为输入，生产一个消息摘要作为输出。消息鉴别码实现鉴别的原理是: 用公开函数和密钥产生一个固定长度的值作为认证标识，用这个标识鉴别消息的完整性。使用一个密钥生成一个固定大小的小数据块，即MAC,并将其加入到消息中，然后传输。接收方利用与发送方共享的密钥进行鉴别认证等。
摘要信息类似这样:
&amp;quot;Authorization: AWS &amp;quot; + AWSAccessKeyId + &amp;quot;:&amp;quot; + base64(hmac-sha1(VERB + &amp;quot;\n&amp;quot; + CONTENT-MD5 + &amp;quot;\n&amp;quot; + CONTENT-TYPE + &amp;quot;\n&amp;quot; + DATE + &amp;quot;\n&amp;quot; + CanonicalizedAmzHeaders + &amp;quot;\n&amp;quot; + CanonicalizedResource))  &amp;emsp;&amp;emsp;我们可以自由规定需要散列的字段，比如时间戳，一些头信息，原子参数等
&amp;emsp;&amp;emsp;代码实现如下(Go语言):
func main() { accessSecret := &amp;quot;dasas&amp;quot; url := &amp;quot;www.baidu.com&amp;quot; request := http.Request{} // 需要签名的字段 stringToSign := request.Method + &amp;quot;\n&amp;quot; + &amp;quot;\n&amp;quot; + request.Header.Get(&amp;quot;Content-type&amp;quot;) + &amp;quot;\n&amp;quot; + url + &amp;quot;\n&amp;quot; signature := sha1base64(stringToSign, accessSecret) authorization := fmt.</description>
    </item>
    
    <item>
      <title>Antigen:让zsh更好用</title>
      <link>https://wushuangxiaoyu.github.io/blog/posts/antigen/</link>
      <pubDate>Sun, 18 Aug 2019 21:29:25 +0800</pubDate>
      
      <guid>https://wushuangxiaoyu.github.io/blog/posts/antigen/</guid>
      <description>Antigen &amp;emsp;&amp;emsp;使用Antigen 让你的zsh更好用！
配置： &amp;emsp;&amp;emsp;保存一下我的配置文件：
antigen bundle git antigen bundle github antigen bundle git-flow #antigen bundle brew antigen bundle heroku antigen bundle pip antigen bundle lein antigen bundle iterm2 #antigen bundle man antigen bundle osx #antigen bundle command-not-found # Syntax highlighting bundle. antigen bundle zsh-users/zsh-syntax-highlighting #antigen bundle zsh-users/zsh-autosuggestions #antigen bundle zsh-users/zsh-completions #antigen bundle soimort/translate-shell # Load the theme. antigen theme robbyrussell # Tell Antigen that you&#39;re done. antigen apply export ZSH=&amp;quot;$HOME/.</description>
    </item>
    
    <item>
      <title>【Go】interface{}和反射</title>
      <link>https://wushuangxiaoyu.github.io/blog/posts/go_interfaceandreflect/</link>
      <pubDate>Sun, 21 Jul 2019 21:32:21 +0800</pubDate>
      
      <guid>https://wushuangxiaoyu.github.io/blog/posts/go_interfaceandreflect/</guid>
      <description>一. 引言 &amp;emsp;&amp;emsp;这几天在撸代码的时候，频繁用到了interface{}和反射，发现自己对Go reflect包还不是很熟悉，特地学习了一下Go反射的相关使用方法和机制，特梳理总结出来，方便日后回顾。
二. 什么是反射 &amp;emsp;&amp;emsp;来看一下反射的定义：反射是一种能力，通过反射，程序可以在程序运行时动态的获取对象信息，分析类的能力以便于自我控制和调整。在我理解：反射机制最关键的地方在于，程序可以在运行状态的自审和探知🐶。
三. Go的类型系统 &amp;emsp;&amp;emsp;既然反射机制很重要的一点就是运行时对类型的审查，那么在弄懂Go的反射机制之前，应该先了解Go的类型系统
3.1面向对象？ &amp;emsp;&amp;emsp;在Is Go an object-oriented language?中有官方给出的回答如下：
 Yes and no. Although Go has types and methods and allows an object-oriented style of programming, there is no type hierarchy. The concept of “interface” in Go provides a different approach that we believe is easy to use and in some ways more general. There are also ways to embed types in other types to provide something analogous—but not identical—to subclassing.</description>
    </item>
    
    <item>
      <title>OAuth 2.0和第三方登录</title>
      <link>https://wushuangxiaoyu.github.io/blog/posts/oauth-2.0%E5%92%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</link>
      <pubDate>Thu, 18 Apr 2019 19:49:29 +0800</pubDate>
      
      <guid>https://wushuangxiaoyu.github.io/blog/posts/oauth-2.0%E5%92%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</guid>
      <description>一. 什么是OAuth2.0 &amp;emsp;&amp;emsp;OAuth是一种开放标准的授权协议或框架，为应用程序提供 “secure designated access” 的能力，在全世界得到广泛应用。
&amp;emsp;&amp;emsp;举个例子，你授权京东可以访问你微信的个人资料等信息，而无需提供京东你的微信密码。这可以最大限度地降低风险：如果京东遭遇破坏，你的微信密码仍然是安全的。
&amp;emsp;&amp;emsp;OAuth不共享密码数据，而是使用授权令牌来证明消费者和服务提供商之间的身份。OAuth是一种身份验证协议，允许你代表你批准与另一个应用程序交互的应用程序，而不会泄露你的密码。
二. OAuth应用场景  第三方登录授权服务（微信，FaceBook等都支持OAuth2.0） 与第三方应用的资源请求或交互 相同公司的不同应用信息共享（uid 相同,openid 不同）  三. OAuth2.0 流程 &amp;emsp;&amp;emsp;OAuth2.0有多种模式，这里只说明授权码模式，具体可参考OAuth 2.0 Grant Types
授权码模式 &amp;emsp;&amp;emsp;授权代码授权类型由Web和移动应用程序使用。它与大多数其他授权类型不同，首先要求应用程序启动浏览器以开始流程。在较高级别，流程包括以下步骤： - 应用程序打开浏览器或拉起应用以将用户发送到OAuth服务器 - 用户看到授权提示并批准应用程序的请求 - 使用查询字符串中的授权代码将用户重定向回应用程序 - 应用程序通过授权代码交换访问令牌
&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;四. 应用：第三方登录 基本流程 &amp;emsp;&amp;emsp;了解了OAuth2.0的流程，第三方登录流程就很简单了，流程图如下所示：
&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;遇到的问题 &amp;emsp;&amp;emsp;在 Facebook 的第三方登录提供的接口中，并没有看到获取code的方法，授权成功后就可以直接获取accessToken了
&amp;emsp;&amp;emsp; 在stackoverflow看了一下，不只我一个遇到这个问题：Facebook login via Android SDK: Is it possible to get the “code” token without exchanging it for an access token?
&amp;emsp;&amp;emsp;也许是因为fb依赖的自己的sdk，获取code的操作在内部已经自动完成了，这样应该也可以，或者说更安全一些？
五. 参考文档  微信开放平台 权限参考文档 — Facebook 登录 OAuth 2.</description>
    </item>
    
    <item>
      <title>hello-world</title>
      <link>https://wushuangxiaoyu.github.io/blog/posts/hello-world/</link>
      <pubDate>Mon, 25 Mar 2019 18:51:14 +0800</pubDate>
      
      <guid>https://wushuangxiaoyu.github.io/blog/posts/hello-world/</guid>
      <description>hello world</description>
    </item>
    
  </channel>
</rss>